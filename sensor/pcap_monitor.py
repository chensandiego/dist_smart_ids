import os
import time
import json
import requests
import threading
import psutil
from scapy.all import sniff

print("[pcap_monitor] Attempting to import detector and config...")
from detector import packet_handler
import config
print("[pcap_monitor] Successfully imported detector and config.")

# --- Global Variables ---
alert_cache = []

def send_heartbeat():
    """Periodically sends a heartbeat to the aggregator with sensor status."""
    print("[pcap_monitor] Heartbeat thread started.")
    while True:
        try:
            payload = {
                "sensor_id": config.SENSOR_ID,
                "status": "online",
                "cpu_usage": psutil.cpu_percent(),
                "memory_usage": psutil.virtual_memory().percent,
                "timestamp": time.time(),
                "last_ip": requests.get('https://api.ipify.org').text # Get external IP
            }
            print(f"[pcap_monitor] Sending heartbeat: {payload}")
            # Assuming AGGREGATOR_URL is for alerts, we need a separate heartbeat endpoint
            # For now, we'll send to a dummy endpoint or log it.
            heartbeat_url = config.AGGREGATOR_URL.rsplit('/', 1)[0] + "/api/heartbeat" # Adjust to heartbeat endpoint
            response = requests.post(heartbeat_url, json=payload, timeout=5)
            response.raise_for_status()
            print("[pcap_monitor] Heartbeat sent successfully.")
        except requests.exceptions.RequestException as e:
            print(f"[pcap_monitor ERROR] Error sending heartbeat: {e}")
        except Exception as e:
            print(f"[pcap_monitor ERROR] Unexpected error in heartbeat thread: {e}")
        time.sleep(config.HEARTBEAT_INTERVAL_SECONDS)

def send_to_aggregator(alert):
    """Sends a single alert to the central aggregator."""
    print(f"[pcap_monitor] Attempting to send alert to aggregator: {alert.get('reason', 'No reason')}")
    try:
        response = requests.post(config.AGGREGATOR_URL, json=alert, timeout=10)
        response.raise_for_status() # Raises an exception for 4xx/5xx errors
        print("[pcap_monitor] Alert sent successfully.")
        return True
    except requests.exceptions.RequestException as e:
        print(f"[pcap_monitor ERROR] Failed to send alert to aggregator: {e}")
        return False

def process_cached_alerts():
    """Tries to send any alerts that were cached due to network issues."""
    global alert_cache
    if not alert_cache:
        print("[pcap_monitor] No cached alerts to process.")
        return

    print(f"[pcap_monitor] Retrying to send {len(alert_cache)} cached alerts...")
    remaining_alerts = []
    for alert in alert_cache:
        if not send_to_aggregator(alert):
            remaining_alerts.append(alert)
    
    alert_cache = remaining_alerts
    save_cache()
    print(f"[pcap_monitor] Finished processing cached alerts. {len(alert_cache)} remaining.")

def cache_alert(alert):
    """Saves an alert to the local cache file."""
    print("[pcap_monitor] Caching alert...")
    alert_cache.append(alert)
    save_cache()
    print("[pcap_monitor] Alert cached.")

def save_cache():
    """Writes the current alert cache to a file."""
    print("[pcap_monitor] Saving cache to file...")
    try:
        with open(config.LOCAL_CACHE_FILE, 'w') as f:
            json.dump(alert_cache, f)
        print("[pcap_monitor] Cache saved.")
    except Exception as e:
        print(f"[pcap_monitor ERROR] Error saving cache: {e}")

def load_cache():
    """Loads cached alerts from a file on startup."""
    global alert_cache
    print("[pcap_monitor] Loading cache from file...")
    if os.path.exists(config.LOCAL_CACHE_FILE):
        with open(config.LOCAL_CACHE_FILE, 'r') as f:
            try:
                alert_cache = json.load(f)
                print(f"[pcap_monitor] Loaded {len(alert_cache)} alerts from cache.")
            except json.JSONDecodeError:
                print("[pcap_monitor ERROR] Error decoding cache file. Starting with empty cache.")
                alert_cache = []
            except Exception as e:
                print(f"[pcap_monitor ERROR] Unexpected error loading cache: {e}")
                alert_cache = []
    else:
        print("[pcap_monitor] No cache file found.")

def handle_packet_and_send(packet):
    """
    Processes a single packet with the detector and sends the resulting alert.
    Caches the alert if sending fails.
    """
    print("[pcap_monitor] Handling packet...")
    alert = packet_handler(packet) # Assuming packet_handler returns a JSON-serializable dict
    if alert:
        print(f"[pcap_monitor] Alert generated by detector: {alert.get('reason', 'N/A')}")
        if not send_to_aggregator(alert):
            print("[pcap_monitor] Failed to send alert, caching for later.")
            cache_alert(alert)
        else:
            # If we successfully send an alert, try to clear any cached ones
            process_cached_alerts()
    else:
        print("[pcap_monitor] No alert generated for this packet.")

def main():
    print("--- Starting Distributed IDS Sensor ---")
    print(f"Sensor ID: {config.SENSOR_ID}")
    print(f"Aggregator URL: {config.AGGREGATOR_URL}")
    print(f"Network Interface: {config.NETWORK_INTERFACE}")
    print("Heartbeat Interval: {config.HEARTBEAT_INTERVAL_SECONDS} seconds")
    print("Local Cache File: {config.LOCAL_CACHE_FILE}")
    print("-------------------------------------")

    # Load any previously cached alerts
    load_cache()

    # Start the heartbeat thread
    heartbeat_thread = threading.Thread(target=send_heartbeat, daemon=True)
    heartbeat_thread.start()

    # Start sniffing the network
    print(f"[pcap_monitor] Sniffing on interface: {config.NETWORK_INTERFACE}")
    try:
        sniff(iface=config.NETWORK_INTERFACE, prn=handle_packet_and_send, store=False)
    except Exception as e:
        print(f"[pcap_monitor ERROR] Error starting sniffer: {e}")
        print("Please ensure you are running this script with sufficient privileges")
        print("and that the specified network interface is correct.")

if __name__ == "__main__":
    main()